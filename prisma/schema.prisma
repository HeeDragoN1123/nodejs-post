// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // MySQL 데이터베이스 엔진을 사용합니다.
  provider = "mysql"
  // 데이터베이스 연결 정보를 .env 파일의 DATABASE_URL 로부터 읽어옵니다.
  url      = env("DATABASE_URL")
}

//회원가입 테이블 정의
model Users {
  userId Int @id @default(autoincrement()) @map("userId")
  nickname String @unique @map("nickname")
  password String @map("password")
  confirm String @map("confirm")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  
  Posts Posts[]    // 사용자 와 게시글은 1:N 관계/
  Comments Comments[] // 사용자는 여러개의 댓글을 사용할 수 있다
@@map("Users")
}


// 포스트 테이블 정의

model Posts {
  postId    Int      @id @default(autoincrement()) @map("postId")
  UserId Int @map("UserId") // 사용자는 여러개의 게시글을 가질수있기 떄문에 유니크를 제외
  user      String   @map("user")
  title     String   @map("title")
  content   String   @map("content") @db.Text
  password  String   @map("password")
  createdAt DateTime @default(now()) @map("createdAt")
  updatedAt DateTime @updatedAt @map("updatedAt")

  User Users @relation(fields: [UserId], references: [userId],onDelete: Cascade)
  comments  Comments[] //@relation("PostsToComments")

  @@map("Posts")
}

// 코멘트 테이블 정의

model Comments {
  commentId Int      @id @default(autoincrement()) @map("commentId")
  UserId Int @map("UserId") // 사용자는 여러개의 게시글을 가질수있기 떄문에 유니크를 제외 
  postId    Int      @map("postId")
  user      String   @map("user")
  password  String   @map("password")
  content   String   @map("content") @db.Text
  createdAt DateTime @default(now()) @map("createdAt") 
  updatedAt DateTime @updatedAt @map("updatedAt")
 
  User  Users @relation(fields: [UserId], references: [userId],onDelete: Cascade)   // 사용자와 게시글은  1:N 관계
  posts  Posts    @relation( fields: [postId], references: [postId]) // Posts 모델과의 관계
  //"PostsToComments",
  
  @@map("Comments")
}
